import { TinteTheme } from '@/types/tinte';
import { ThemeProvider, ProviderOutput, ProviderMetadata } from './types';
import { WarpIcon } from '@/components/shared/icons/warp';
import { 
  createPolineColorMapping, 
  toYAML, 
  getThemeName, 
  getDisplayName 
} from './poline-base';

export interface WarpTheme {
  accent: string;
  background: string;
  details: 'darker' | 'lighter';
  foreground: string;
  terminal_colors: {
    bright: {
      black: string;
      blue: string;
      cyan: string;
      green: string;
      magenta: string;
      red: string;
      white: string;
      yellow: string;
    };
    normal: {
      black: string;
      blue: string;
      cyan: string;
      green: string;
      magenta: string;
      red: string;
      white: string;
      yellow: string;
    };
  };
}

function generateWarpTheme(theme: TinteTheme, mode: 'light' | 'dark'): WarpTheme {
  const block = theme[mode];
  const colorMapping = createPolineColorMapping(block);
  
  // Use opposite mode for contrast colors
  const oppositeBlock = theme[mode === 'light' ? 'dark' : 'light'];
  const oppositeMapping = createPolineColorMapping(oppositeBlock);
  
  return {
    accent: colorMapping.accent,
    background: colorMapping.bg,
    details: mode === 'light' ? 'lighter' : 'darker',
    foreground: colorMapping.tx,
    terminal_colors: {
      bright: {
        black: colorMapping.tx2,
        blue: colorMapping.blue,
        cyan: colorMapping.cyan,
        green: colorMapping.green,
        magenta: colorMapping.magenta,
        red: colorMapping.red,
        white: oppositeMapping.bg,
        yellow: colorMapping.yellow,
      },
      normal: {
        black: oppositeMapping.bg,
        blue: colorMapping.blue2,
        cyan: colorMapping.cyan2,
        green: colorMapping.green2,
        magenta: colorMapping.magenta2,
        red: colorMapping.red2,
        white: colorMapping.tx,
        yellow: colorMapping.yellow2,
      },
    },
  };
}

export class WarpProvider implements ThemeProvider<{ light: WarpTheme; dark: WarpTheme }> {
  readonly metadata: ProviderMetadata = {
    id: 'warp',
    name: 'Warp',
    description: 'Modern terminal with AI and collaboration features',
    category: 'terminal',
    tags: ['terminal', 'ai', 'modern', 'collaboration'],
    icon: WarpIcon,
    website: 'https://www.warp.dev/',
    documentation: 'https://docs.warp.dev/appearance/custom-themes',
  };

  readonly fileExtension = '.yaml';
  readonly mimeType = 'application/x-yaml';

  convert(theme: TinteTheme): { light: WarpTheme; dark: WarpTheme } {
    return {
      light: generateWarpTheme(theme, 'light'),
      dark: generateWarpTheme(theme, 'dark'),
    };
  }

  export(theme: TinteTheme, filename?: string): ProviderOutput {
    const converted = this.convert(theme);
    const themeName = filename || getThemeName(theme.name || 'tinte-theme');
    
    // Use dark theme by default
    const warpTheme = converted.dark;
    
    // Add metadata to the theme
    const themeWithMetadata = {
      // Metadata (as YAML comments would be ideal, but we'll use a structure that works)
      name: getDisplayName(theme.name || 'Tinte Theme'),
      generator: 'Tinte Theme Converter with Poline',
      url: 'https://github.com/your-repo/tinte',
      
      // Theme data
      ...warpTheme,
    };

    const yamlContent = `# Warp Terminal Theme
# Theme: ${getDisplayName(theme.name || 'Tinte Theme')}
# Generated by: Tinte Theme Converter with Poline
# URL: https://github.com/your-repo/tinte

${toYAML(warpTheme)}`;

    return {
      content: yamlContent,
      filename: `${themeName}-warp.yaml`,
      mimeType: this.mimeType,
    };
  }

  validate(output: { light: WarpTheme; dark: WarpTheme }): boolean {
    const validateTheme = (theme: WarpTheme): boolean => {
      return !!(
        theme.accent &&
        theme.background &&
        theme.foreground &&
        theme.details &&
        theme.terminal_colors?.bright?.red &&
        theme.terminal_colors?.bright?.green &&
        theme.terminal_colors?.bright?.blue &&
        theme.terminal_colors?.normal?.red &&
        theme.terminal_colors?.normal?.green &&
        theme.terminal_colors?.normal?.blue
      );
    };

    return validateTheme(output.light) && validateTheme(output.dark);
  }
}